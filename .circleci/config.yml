version: 2.1

jobs:
  first-job:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout 
      - run:
          name: first-job
          command: |
            echo "first-job executed"

  python-linting:
    working_directory: ~/repo
    docker:
      - image: python:3.7-slim
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            cd code
            ls -la
            pip install --upgrade pip
            python3 -m venv .capstone
            source .capstone/bin/activate
            pip install --trusted-host pypi.python.org -r requirements/base.txt
      - run:
          name: run python lint
          command: |
            cd code
            ls -la
            source .capstone/bin/activate
            pylint main.py

  docker-linting:
    working_directory: ~/repo
    docker:
      - image: python:3.7-slim
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            apt-get -y update
            apt -y install wget
            cd code
            ls -la
            python3 -m venv .capstone
            source .capstone/bin/activate
            #install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.10.0/hadolint-Linux-x86_64
            chmod +x /bin/hadolint
      - run:
          name: run docker lint
          command: |
            cd code
            ls -la
            source .capstone/bin/activate
            hadolint Dockerfile

  run-tests:
    working_directory: ~/repo
    docker:
      - image: python:3.7-slim
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            cd code
            ls -la
            python3 -m venv .capstone
            source .capstone/bin/activate
            pip install -r requirements/base.txt
      - run:
          name: run pytest
          command: |
            cd code
            ls -la
            source .capstone/bin/activate
            pytest

  build-docker-img:
    working_directory: ~/repo
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - code/caches/capstone.tar
      - run:
          name: Load Docker image layer cache
          command: |
            cd code
            set +o pipefail
            docker load -i /caches/capstone.tar | true
      - run:
          name: Build application Docker image
          command: |
            cd code
            docker build --tag=techdemowz/capstone:latest --cache-from=capstone -t capstone .
      - run:
          name: Save Docker image layer cache
          command: |
            cd code
            mkdir -p /caches
            docker save -o /caches/capstone.tar capstone
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - code/caches/capstone/.tar
      - run:
          name: Upload docker image
          command: |
            cd code
            docker login -u=techdemowz -p=Comipems01
            docker push techdemowz/capstone:latest

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar
          command: yum install -y tar gzip   
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            cd code
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=capstone \
              --stack-name "capstone-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      
      - run:
          name: Add EC2 ip to ansible inventory
          command: |
            cd code
            yum -y install tar gzip
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=capstone-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> ~/project/code/.circleci/ansible/inventory.txt
            cat ~/project/code/.circleci/ansible/inventory.txt
            echo ${CIRCLE_WORKFLOW_ID:0:7}
      - persist_to_workspace:
          root: ~/
          paths:
            - ~/project/code/.circleci/ansible/inventory.txt

workflows:
  default:
    jobs:
      - first-job
      - python-linting
      - docker-linting
      - run-tests
      - build-docker-img:
          requires: [first-job, python-linting, docker-linting, run-tests]
      - deploy-infrastructure:
          requires: [build-docker-img]